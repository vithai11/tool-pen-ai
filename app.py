import streamlit as st
import pandas as pd
import numpy as np
from xgboost import XGBClassifier

st.title("D·ª± ƒëo√°n Penalty AI t·ª± h·ªçc (b·∫£n m·∫°nh)")

# Data ban ƒë·∫ßu
if 'data' not in st.session_state:
    st.session_state.data = pd.DataFrame(columns=['player_shot', 'gk_move'])

# Model ban ƒë·∫ßu
if 'model' not in st.session_state:
    st.session_state.model = XGBClassifier(use_label_encoder=False, eval_metric='mlogloss')
    st.session_state.model.fit([[0, 0], [1, 1]], [0, 1])  # Fit fake ƒë√∫ng 2 class

# Map
move_mapping = {'Tr√°i': 0, 'Gi·ªØa': 1, 'Ph·∫£i': 2}
reverse_mapping = {0: 'Tr√°i', 1: 'Gi·ªØa', 2: 'Ph·∫£i'}

# Ng∆∞·ªùi ch∆°i ch·ªçn
st.subheader("1. B·∫°n ch·ªçn h∆∞·ªõng s√∫t:")
col1, col2, col3 = st.columns(3)
with col1:
    player_shot = st.button('‚¨ÖÔ∏è Tr√°i')
with col2:
    player_shot_center = st.button('‚¨ÜÔ∏è Gi·ªØa')
with col3:
    player_shot_right = st.button('‚û°Ô∏è Ph·∫£i')

# Th·ªß m√¥n
st.subheader("2. Th·ªß m√¥n nh·∫£y h∆∞·ªõng n√†o?")
col4, col5, col6 = st.columns(3)
with col4:
    gk_left = st.button('üñêÔ∏è Tr√°i')
with col5:
    gk_center = st.button('üñêÔ∏è Gi·ªØa')
with col6:
    gk_right = st.button('üñêÔ∏è Ph·∫£i')

# L∆∞u k·∫øt qu·∫£
if player_shot or player_shot_center or player_shot_right:
    player_move = 0 if player_shot else 1 if player_shot_center else 2

    if gk_left:
        gk_move = 0
    elif gk_center:
        gk_move = 1
    elif gk_right:
        gk_move = 2
    else:
        gk_move = None

    if gk_move is not None:
        new_data = pd.DataFrame([[player_move, gk_move]], columns=['player_shot', 'gk_move'])
        st.session_state.data = pd.concat([st.session_state.data, new_data], ignore_index=True)

        # Train l·∫°i model n·∫øu c√≥ nhi·ªÅu h∆°n 5 d·ªØ li·ªáu
        if len(st.session_state.data) >= 5:
            X = st.session_state.data[['player_shot']]
            y = st.session_state.data['gk_move']
            st.session_state.model.fit(X, y)

        # D·ª± ƒëo√°n h∆∞·ªõng th·ªß m√¥n
        pred = st.session_state.model.predict([[player_move]])
        result = "ƒê√∫ng d·ª± ƒëo√°n" if pred[0] != gk_move else "Sai d·ª± ƒëo√°n"
        st.write(f"D·ª± ƒëo√°n c·ªßa AI: {result}")

# G·ª£i √Ω cho l·∫ßn k·∫ø ti·∫øp
if len(st.session_state.data) >= 5:
    next_moves = []
    for i in range(3):
        proba = st.session_state.model.predict_proba([[i]])[0]
        success_rate = 1 - proba[i]
        next_moves.append((i, success_rate))

    best_move = max(next_moves, key=lambda x: x[1])

    st.subheader("G·ª£i √Ω t·ª´ AI (cho l∆∞·ª£t k·∫ø ti·∫øp):")
    st.success(f"N√™n s√∫t v·ªÅ: {reverse_mapping[best_move[0]]}")
    st.write(f"T·ª∑ l·ªá s√∫t th√†nh c√¥ng: {best_move[1]*100:.2f}%")